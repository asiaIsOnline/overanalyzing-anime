---
import { GraphQLClient } from "graphql-request";
import PageLayout from '../layouts/PageLayout.astro';
import BlogPost from '../components/BlogPost.astro';

// New GraphQL client with Hygraph endpoint
const client = new GraphQLClient(import.meta.env.HYGRAPH_ENDPOINT);

// Declare Posts type
type Posts = {
	posts: {
		slug: string; 
		title: string;
		body?: {
			text: string;
		};
		likes: number;
		postAuthor: {
			postAuthor: string;
		}
		postCategories: {
			categoryName: string;
		}
		postTags: {
			tagName: string;
		}
		publishDate: string;
		image?: {
			url: string | null;
			altText: string | null;
		}
		videoLink: string;
		videoToggle: boolean;
	}[];
};

//GraphQL query to fetch data
const allRecentPosts = `
	query AllRecentPosts {
		posts(orderBy: publishDate_DESC) {
			slug
			title
			body {
				html
				}
			likes
			postAuthor {
				postAuthor
				}
			postCategories {
				categoryName
				}
			postTags {
				tagName
				}
			publishDate
			image {
				url
				altText
				}
			videoLink
			videoToggle
		}
	}`

const { posts }: Posts = await client.request(allRecentPosts)

const pageTitle = "Home"
---

<PageLayout title={pageTitle}>
	<section>
		<ul class="flex flex-col gap-16">
			{
			  posts.map((post: any) => {
				return (
					<li>
						<BlogPost 
							title={post.title}
							slug={post.slug}
							publishDate={post.publishDate}
							author={post.postAuthor.postAuthor}
							category={
								post.postCategories.map(function(element: { categoryName: string }, index: number, array: { categoryName: string }[]){
									if (index == array.length -1) {
										return `${element.categoryName}`
									} else {
										return `${element.categoryName}, `
									}
								})
							}
							tag={
								post.postTags.map(function(element: { tagName: string }, index: number, array: { tagName: string }[]){
									if (index == array.length -1) {
										return `${element.tagName}`
									} else {
										return `${element.tagName}, `
									}
								})
							}
							commentNumber={0}
							likeNumber={post.likes}
							imageURL={
								post.image.map(function(element: { url: string, altText: string }, index: number, array: { url: string, altText: string }[]){
									return `${element.url}`
								})
							}
							imageAltText={
								post.image.map(function(element: { url: string, altText: string }, index: number, array: { url: string, altText: string }[]){
									return `${element.altText}`
								})
							}
							videoURL={post.videoLink}
							videoToggle={post.videoToggle}
						/>
					</li>
				);
			  })
			}
		  </ul>
	</section>
</PageLayout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
